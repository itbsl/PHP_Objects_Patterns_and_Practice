<?php
//**************************************************************
/*
 * 本章涵盖的主题
 * 1.类和对象: 声明类和初始化对象
 * 2.构造方法: 自动构造的对象
 * 3.基本类型和类类型: 为什么类型很重要?
 * 4.继承: 为什么需要继承,如何使用继承?
 * 5.可见性: 梳理对象接口,保护方法和属性免受干扰
 */
//**************************************************************

//3.1.1 类
//在PHP中,是用class关键字来声明一个类,语法如下
/*
class 类名
{
    //类体
}
*/
//说明:
//1. 类名可以是任意数字和字母的组合,但不能以数字开头,推荐首字母大写的驼峰式命名法(如: Foo, ShopProduct)
//2. 类体必须定义在一对大括号内

//示例:
class ShopProduct
{

}

//3.1.2 对象
//我们把类认作是生成对象的模板,也就是说,对象是根据类中定义的模板所构建的数据,我们通常会说对象是类的实例(对象=实例).
//在PHP中,是用new关键字来创建对象的,语法如下
/*
new 类名(); //推荐
new 类名;   //不推荐
//在类定义内部还有两个创建对象的方法是 new self() 和 new parent(), 这两个方法分别表示创建第一个同类对象和对象一个父类对象,但是这两个方法都只能在类方法中使用,类外不能使用
*/

//创建ShopProduct对象

$product1 = new ShopProduct();
$product2 = new ShopProduct();

/*
 * 说明:
 * 使用ShopProduct类作为模板生成了两个 ShopProduct 对象.尽管$product1和$product2在功能上是对等的,
 * 但是它们是由一个类创建的、具有相同类型的不同对象.
 */

if ($product1 === $product2) {
    echo '是同一个对象';
} else {
    echo '不是同一个对象';
}

/*
 * 注意:
 * 老版本的PHP(在PHP5.1之前)可以直接echo打印一个对象,这会将对象转换为一个包含对象ID的字符串.但是自PHP5.2开始,
 * PHP就不再支持这个功能了.除非在这个对象的类中定义有__toString()方法,否则任何时候试图将一个对象当做字符串处理
 * 都会导致错误.可以使用var_dump()函数来打印PHP对象.